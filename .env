PORT=3030
REMIX_APP_PORT=3030

NODE_ENV=production
RUNTIME_PLATFORM=docker-compose

V3_ENABLED=true
# TRIGGER_TELEMETRY_DISABLED=1
INTERNAL_OTEL_TRACE_DISABLED=1
INTERNAL_OTEL_TRACE_LOGGING_ENABLED=0

POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=postgres
DATABASE_HOST=postgres:5432
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_HOST}/${POSTGRES_DB}

# This sets the URL used for direct connections to the database and should only be needed in limited circumstances
# See: https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#fields:~:text=the%20shadow%20databa>
# DIRECT_URL=${DATABASE_URL}
DIRECT_URL=postgresql://postgres:postgres@postgres:5432/postgres



REDIS_HOST=redis
REDIS_PORT=6379
REDIS_TLS_DISABLED=true

# If this is set, emails that are not specified won't be able to log in
# WHITELISTED_EMAILS="authorized@yahoo\.com|authorized@gmail\.com"

# Accounts with these emails will become admins when signing up and get access to the admin panel
# ADMIN_EMAILS="admin@example\.com|another-admin@example\.com"

# If this is set, your users will be able to log in via GitHub
# AUTH_GITHUB_CLIENT_ID=
# AUTH_GITHUB_CLIENT_SECRET=

# E-mail settings
#
# - Ensure the FROM_EMAIL matches what you setup with Resend.com
# - If these are not set, emails will be printed to the console
#
FROM_EMAIL=trigger@xelonsoft.com
# REPLY_TO_EMAIL=trigger@xelonsoft.com
RESEND_API_KEY=re_6YhjbvpD_FuyhixvkEUT8o3qoEuCju99U

# Concurrency limits
#
# - If these are too high, you may run out of resources on your worker. A simple fix is to either re-deploy
#   with lower limits, or set appropriate limits in your trigger.config.ts or directly on your tasks.
#
DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT=300
DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT=100

# Secrets
#
# - You MUST change these in production!
#
# generate these with `openssl rand -hex 16`
MAGIC_LINK_SECRET=3f7d5a91e246c8b90f3d2e1c5a4b8907
ENCRYPTION_KEY=2c4f6e8a1b3d5907f2e4d6c8b0a93751
SESSION_SECRET=6e8f2c4d9b7a1053f8e6d4c2b9a07153
#
# generate these with `openssl rand -hex 32`
PROVIDER_SECRET=1a3b5c7d9e2f4a6b8c0d2e4f6a8b0c2d4e6f8a0b2c4d6e8f0a2c4e6b8d0f2e4
COORDINATOR_SECRET=5f7e1d3c9b8a4062f7e5d3c1b9a84062e7f5d3c1b9a84062d7f5e3c1b9a8406

# Registry settings
#
# - Images will be pushed to: host/namespace/project:version
#
DEPLOY_REGISTRY_HOST=docker.io
DEPLOY_REGISTRY_NAMESPACE=trigger # you should change this, for example to your Docker Hub username

# Worker settings
#
HTTP_SERVER_PORT=9020
COORDINATOR_HOST=209.38.165.29
COORDINATOR_PORT=${HTTP_SERVER_PORT}
REGISTRY_HOST=${DEPLOY_REGISTRY_HOST}
REGISTRY_NAMESPACE=${DEPLOY_REGISTRY_NAMESPACE}
# FORCE_CHECKPOINT_SIMULATION=0 # only uncomment if you are willing to try EXPERIMENTAL docker features - expect bugs

# Domain settings
#
# - Should be uncommented unless you're just testing locally
# - Required for the split webapp / worker setup
#
TRIGGER_PROTOCOL=https
TRIGGER_DOMAIN=trigger.oruhost.com
ELECTRIC_ORIGIN=http://localhost:3060
APP_ORIGIN=https://trigger.oruhost.com
LOGIN_ORIGIN=https://trigger.oruhost.com
SERVICE_FQDN_TRIGGER=https://trigger.oruhost.com
SERVICE_FQDN_TRIGGER_3000=https://trigger.oruhost.com

